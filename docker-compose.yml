version: "3.8"
services:

  tmsys-service:
    build:
      context: ./tmsys-service
      dockerfile: Dockerfile
    ports: 
      - 5000:5000
    networks:
      - database_io
      - core_io
      - auth_io

  core-service:
    build:
      context: ./core-service
      dockerfile: Dockerfile
    ports: 
      - 5001:5000
    volumes:
      - ./core:/app
    networks:
      - core_io
      - core_email
      - auth_core
      - kong_core
 
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports: 
      - 5002:5000
    environment:
      AUTH_JWT_KEY: /run/secrets/secret_auth_jwt_key
    secrets:
      - secret_auth_jwt_key
    networks:
      - auth_io
      - auth_core
      - kong_auth

  adminer:
    image: adminer
    ports:
      - 8080:8080
    networks:
      - database_adminer
      - kong_adminer
  
  kong-database:
    image: postgres:9.6
    container_name: kong-database
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    volumes:
      - "db-data-kong-postgres:/var/lib/postgresql/data"

  kong-migrations:
    image: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
    command: kong migrations bootstrap
    restart: on-failure
    depends_on:
      - kong-database

  kong:
    image: kong:latest
    container_name: kong
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_CASSANDRA_CONTACT_POINTS: kong-database
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl 
    restart: on-failure
    ports:
      - 80:8000
      - 443:8443
    links:
      - kong-database:kong-database
    depends_on:
      - kong-migrations
    networks:
      - kong_auth
      - kong_core
      - kong_adminer

  konga:
    image: pantsel/konga
    ports:
      - 1337:1337
    links:
      - kong:kong
    container_name: konga
    environment:
      - NODE_ENV=production

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always

  node_exporter:
    image: prom/node-exporter:latest
    ports:
      - 9100:9100
    container_name: node_exporter
    restart: always
    depends_on:
      - prometheus

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 3000:3000
    restart: always
    links: 
      - prometheus:prometheus
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel, grafana-simple-json-datasource
    depends_on:
      - prometheus

  public:
    build:
      context: ./public
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    environment:
      CHOKIDAR_USEPOLLING: "true"
      NODE_ENV: development
      PROXY: "true"
    stdin_open: true
    networks:
      - public_kong
    volumes:
      - "./frontend/src/.:/app/src"
      - "./frontend/public/.:/app/public"

volumes:
  db-data-kong-postgres:

networks:
  database_adminer:
  database_io:
  core_io:
  core_email:
  auth_core:
  auth_io:
  kong_adminer:
  kong_auth:
  kong_core:
  public_kong:



